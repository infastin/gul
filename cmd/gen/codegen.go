package main

import (
	"flag"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"text/template"
)

type Context struct {
	Comment string
	BitSize int
}

func main() {
	flag.Usage = func() {
		fmt.Println("Usage: codegen [-template <path>] [-output <path>] [-bitsize <number>]")
		flag.PrintDefaults()
	}

	tmplPath := flag.String("template", "", "template path")
	outPath := flag.String("output", "", "output path")
	bitsize := flag.Int("bitsize", 32, "bit size")

	flag.Parse()
	if flag.NArg() > 0 || flag.NFlag() == 0 {
		flag.Usage()
		os.Exit(1)
	}

	if *tmplPath == "" {
		fmt.Fprintf(os.Stderr, "Cannot use \"\" as the template file path\n")
		os.Exit(1)
	}

	if *outPath == "" {
		fmt.Fprintf(os.Stderr, "Cannot use \"\" as the output file path\n")
		os.Exit(1)
	}

	tmpl := template.New("").Funcs(template.FuncMap{
		"typename":        typenameHelper,
		"simple_typename": simpleTypenameHelper,
		"iter":            iterHelper,
		"sep":             sepHelper,
		"enum":            enumHelper,
		"add":             addHelper,
		"mul":             mulHelper,
	})

	tmpl, err := tmpl.ParseFiles(*tmplPath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Couldn't parse template file \"%s\": %s\n", *tmplPath, err.Error())
		os.Exit(1)
	}
	tmplName := filepath.Base(*tmplPath)

	out, err := os.Create(*outPath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Couldn't create file \"%s\": %s\n", *outPath, err.Error())
		os.Exit(1)
	}

	context := Context{
		Comment: "This file is generated by codegen.go; DO NOT EDIT!",
		BitSize: *bitsize,
	}

	if err = tmpl.ExecuteTemplate(out, tmplName, context); err != nil {
		fmt.Fprintf(os.Stderr, "Couldn't execute template file: %s\n", err.Error())
		os.Exit(1)
	}

	out.Close()

	err = exec.Command("gofmt", "-w", *outPath).Run()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Couldn't execute gofmt: %s\n", err.Error())
		os.Exit(1)
	}
}

func typenameHelper(m, n int) string {
	switch {
	case m == n:
		return fmt.Sprintf("Mat%d", m)
	case m == 1:
		return fmt.Sprintf("Vec%d", n)
	case n == 1:
		return fmt.Sprintf("Vec%d", m)
	default:
		return fmt.Sprintf("Mat%dx%d", m, n)
	}
}

func simpleTypenameHelper(m, n int) string {
	if m == n {
		return fmt.Sprintf("Mat%d", m)
	}
	return fmt.Sprintf("Mat%dx%d", m, n)
}

func iterHelper(from, to int) []int {
	iter := make([]int, to-from)
	for i := from; i < to; i++ {
		iter[i-from] = i
	}
	return iter
}

func enumHelper(args ...int) []int {
	return args
}

func addHelper(args ...int) int {
	sum := 0
	for _, a := range args {
		sum += a
	}
	return sum
}

func sepHelper(sep string, i int) string {
	if i == 0 {
		return ""
	}
	return sep
}

func mulHelper(args ...int) int {
	prod := 1
	for _, a := range args {
		prod *= a
	}
	return prod
}
